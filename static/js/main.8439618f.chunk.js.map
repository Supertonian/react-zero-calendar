{"version":3,"sources":["components/calendar.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","setTitle","sidebarOpened","calendarRef","handleEventClick","clickInfo","handleDateSelect","selectInfo","view","calendar","unselect","handleEventChange","changeInfo","revert","renderEventContent","eventContent","renderHeaderContent","content","renderDayContent","onUpdateDates","current","getApi","title","useEffect","updateSize","useObserver","ref","height","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","luxonPlugin","rrulePlugin","headerToolbar","locale","initialView","nowIndicator","titleFormat","buttonIcons","firstDay","navLinks","editable","selectable","selectMirror","dayMaxEvents","dayMaxEventRows","slotDuration","slotLabelInterval","events","start","end","select","eventClick","eventChange","fixedWeekCount","datesSet","allDayText","moreLinkText","dayHeaderContent","dayCellContent","allDayMaintainDuration","useStyles","makeStyles","theme","root","display","marginRight","yearMonth","flexGrow","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","marginTop","contentShift","App","classes","useTheme","React","createRef","useState","open","setOpen","transitionEnded","setTransitionEnded","className","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","color","aria-label","onClick","edge","Typography","variant","today","Button","prev","next","Select","labelId","id","value","MenuItem","Drawer","anchor","paper","direction","Divider","List","map","text","index","ListItem","button","key","ListItemIcon","ListItemText","primary","onTransitionEnd","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8439618f.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useObserver } from \"mobx-react\";\r\nimport FullCalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport luxonPlugin from \"@fullcalendar/luxon\";\r\nimport rrulePlugin from \"@fullcalendar/rrule\";\r\n// import { getLunar } from \"holiday-kr\";\r\n\r\nconst Calendar = ({ setTitle, sidebarOpened, calendarRef }) => {\r\n  useEffect(() => {\r\n    calendarRef.current.getApi().updateSize();\r\n  }, [calendarRef, sidebarOpened]);\r\n\r\n  useEffect(() => {\r\n    setTitle(calendarRef.current.getApi().view.title);\r\n  }, [calendarRef, setTitle]);\r\n\r\n  function handleEventClick(clickInfo) {}\r\n\r\n  function handleDateSelect(selectInfo) {\r\n    const calendarApi = selectInfo.view.calendar;\r\n    calendarApi.unselect();\r\n  }\r\n\r\n  function handleEventChange(changeInfo) {\r\n    changeInfo.revert();\r\n  }\r\n\r\n  function renderEventContent(eventContent) {}\r\n\r\n  function renderHeaderContent(content) {}\r\n\r\n  function renderDayContent(content) {}\r\n\r\n  function onUpdateDates() {\r\n    if (calendarRef && calendarRef.current) {\r\n      setTitle(calendarRef.current.getApi().view.title);\r\n    }\r\n  }\r\n\r\n  return useObserver(() => (\r\n    <>\r\n      <FullCalendar\r\n        ref={calendarRef}\r\n        height=\"600px\"\r\n        plugins={[\r\n          dayGridPlugin,\r\n          timeGridPlugin,\r\n          interactionPlugin,\r\n          luxonPlugin,\r\n          rrulePlugin,\r\n        ]}\r\n        headerToolbar={false}\r\n        locale=\"ko\"\r\n        initialView=\"dayGridMonth\"\r\n        nowIndicator\r\n        titleFormat=\"yyyy년 {MM}월\"\r\n        buttonIcons\r\n        firstDay={0}\r\n        navLinks\r\n        editable\r\n        selectable\r\n        selectMirror\r\n        dayMaxEvents\r\n        dayMaxEventRows={6}\r\n        slotDuration=\"00:30:00\"\r\n        slotLabelInterval=\"01:00\"\r\n        events={[\r\n          {\r\n            title: \"HELLO\",\r\n            start: \"2020-10-01 00:00:00\",\r\n            end: \"2020-10-03 15:00:00\",\r\n          },\r\n        ]}\r\n        select={handleDateSelect}\r\n        eventContent={renderEventContent}\r\n        eventClick={handleEventClick}\r\n        eventChange={handleEventChange}\r\n        fixedWeekCount={false}\r\n        datesSet={onUpdateDates}\r\n        allDayText=\"종일\"\r\n        moreLinkText=\"\"\r\n        dayHeaderContent={renderHeaderContent}\r\n        dayCellContent={renderDayContent}\r\n        allDayMaintainDuration\r\n      />\r\n    </>\r\n  ));\r\n};\r\n\r\nexport default Calendar;\r\n","import React, { useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport NavigateBeforeIcon from \"@material-ui/icons/NavigateBefore\";\r\nimport NavigateNextIcon from \"@material-ui/icons/NavigateNext\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\r\nimport MailIcon from \"@material-ui/icons/Mail\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Calendar from \"./components/calendar\";\r\n\r\nconst LeftSidebarWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  title: {\r\n    marginRight: \"70px\",\r\n  },\r\n  yearMonth: {\r\n    flexGrow: 1,\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${LeftSidebarWidth}px)`,\r\n    marginLeft: LeftSidebarWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  drawer: {\r\n    width: LeftSidebarWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: LeftSidebarWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -LeftSidebarWidth,\r\n    marginTop: 64,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const ref = React.createRef();\r\n  const [open, setOpen] = useState(false);\r\n  const [transitionEnded, setTransitionEnded] = useState(false);\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handlePrevClick = () => {\r\n    ref.current.getApi().prev();\r\n  };\r\n\r\n  const handleNextClick = () => {\r\n    ref.current.getApi().next();\r\n  };\r\n\r\n  const handleTodayClick = () => {\r\n    ref.current.getApi().today();\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            캘린더\r\n          </Typography>\r\n          <IconButton\r\n            onClick={handleTodayClick}\r\n            color=\"inherit\"\r\n            aria-label=\"today-button\"\r\n            edge=\"start\"\r\n          >\r\n            <Button variant=\"outlined\" color=\"default\">\r\n              오늘\r\n            </Button>\r\n          </IconButton>\r\n          <IconButton\r\n            onClick={handlePrevClick}\r\n            color=\"inherit\"\r\n            aria-label=\"arrow-left\"\r\n            edge=\"start\"\r\n          >\r\n            <NavigateBeforeIcon />\r\n          </IconButton>\r\n          <IconButton\r\n            onClick={handleNextClick}\r\n            color=\"inherit\"\r\n            aria-label=\"arrow-right\"\r\n            edge=\"start\"\r\n          >\r\n            <NavigateNextIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.yearMonth}>\r\n            {title}\r\n          </Typography>\r\n          <IconButton color=\"inherit\" aria-label=\"user-setting\" edge=\"start\">\r\n            <SettingsIcon />\r\n          </IconButton>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={0}\r\n            // onChange={}\r\n          >\r\n            <MenuItem value={0}>월</MenuItem>\r\n            <MenuItem value={1}>주</MenuItem>\r\n            <MenuItem value={2}>일</MenuItem>\r\n          </Select>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === \"ltr\" ? (\r\n              <ChevronLeftIcon />\r\n            ) : (\r\n              <ChevronRightIcon />\r\n            )}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <Button>만들기</Button>\r\n        <List>\r\n          {[\"내 캘린더\"].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>\r\n                {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n              </ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          {[\"다른 캘린더\"].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>\r\n                {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n              </ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n      <main\r\n        onTransitionEnd={() => setTransitionEnded(!transitionEnded)}\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        <Calendar\r\n          setTitle={setTitle}\r\n          calendarRef={ref}\r\n          sidebarOpened={transitionEnded}\r\n        />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}