{"version":3,"sources":["utils/datetime.js","components/createDialog.js","components/viewDialog.js","utils/apicall.js","components/calendar.js","styles/sidebar.js","i18n/lang_ko.js","i18n/lang_en.js","i18n/init.js","App.js","serviceWorker.js","index.js"],"names":["datetime","dayLabel","en","ko","getDayName","dow","country","Object","keys","this","includes","toLuxon","a","DateTime","fromJSDate","Date","palette","IndianRed","Crimson","Tomato","Gold","Magenta","RebeccaPurple","Indigo","Lime","ForestGreen","SaddleBrown","CreateDialog","observer","setOpen","addEvent","defaultSettings","categoryList","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","React","useState","title","setTitle","selectedStartDate","setSelectedStartDate","selectedEndDate","setSelectedEndDate","allDay","setAllDay","important","setImportant","category","setCategory","place","setPlace","color","setColor","useEffect","start","fromISO","local","end","plus","minutes","handleClose","Dialog","open","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","Container","Select","value","onChange","event","target","map","item","MenuItem","Grid","container","Input","autoFocus","placeholder","onChangeCapture","FormControlLabel","control","Checkbox","checked","name","label","utils","LuxonUtils","justify","DateTimePicker","margin","format","date","onSelect","DialogActions","Button","onClick","isAllDay","eventInfo","toISO","trim","concat","forceAllDay","ViewDialog","deleteEvent","editEvent","editFlag","setEditFlag","classes","makeStyles","marginIcon","marginLeft","useStyles","nvl","str","defaultStr","replace","style","textAlign","IconButton","className","aria-label","extendedProps","startStr","endStr","editInfo","type","display","height","dividers","importance","calendarId","apiKey","url","localforage","getItem","axios","get","response","status","setItem","data","items","touchStartX","touchStartY","touchEndX","touchEndY","Calendar","setter","calendarRef","locale","lunar","holiday","minDurationMinutes","focusDate","events","changeEvent","createDialogOpen","setCreateDialogOpen","viewDialogOpen","setViewDialogOpen","setDefaultSettings","setEvent","holidayList","setHolidayList","handleGesture","useCallback","current","deltaX","Math","abs","deltaY","getApi","next","prev","handleTouchStart","e","changedTouches","screenX","screenY","handleTouchEnd","isNaN","window","innerHeight","clientHeight","setOption","document","querySelector","addEventListener","removeEventListener","ref","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","luxonPlugin","rrulePlugin","listPlugin","headerToolbar","initialView","nowIndicator","titleFormat","buttonIcons","firstDay","navLinks","editable","selectable","selectMirror","dayMaxEvents","dayMaxEventRows","slotDuration","slotLabelInterval","slotEventOverlap","slice","select","selectInfo","toISOString","dateClick","info","dateStr","view","days","eventContent","eventClick","clickInfo","eventChange","changeInfo","oldEvent","fixedWeekCount","datesSet","dateInfo","focusInLuxon","currentStart","currentEnd","setFocusDate","toISODate","viewType","split","year","month","Y","M","D","startY","startM","endY","endM","getHoliday","then","holidays","forEach","push","summary","catch","console","error","allDayText","moreLinkText","dayHeaderContent","content","text","Hidden","xsDown","fontSize","paddingLeft","getLunar","day","smUp","dayCellContent","getDate","allDayMaintainDuration","navLinkDayClick","changeView","setViewType","unselectAuto","unselectCancel","selectAllow","dragScroll","progressiveEventRendering","sidebarStyles","list","width","fullList","root","marginRight","yearMonth","flexGrow","translation","week","calendar","today","defaultCalendar","importCalendar","newCalendar","i18n","use","initReactI18next","init","resources","lng","fallbackLng","interpolation","escapeValue","observable","maxId","categories","store","persist","schema","show","Number","i","length","splice","addCategory","filter","filterEvents","create","hydrate","App","left","state","setState","createRef","useLocalStorage","setLunar","setHoliday","language","setLanguage","t","useTranslation","changeLanguage","gotoDate","anchor","toggleDrawer","key","handleLunarChange","String","handleHolidayChange","AppBar","position","Toolbar","edge","Typography","variant","labelId","SwipeableDrawer","onOpen","clsx","role","onKeyDown","List","index","ListItem","selected","button","Divider","handleCategoryChange","prompt","marginTop","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e85af6f2.chunk.js","sourcesContent":["import { DateTime } from 'luxon';\r\n\r\nconst datetime = {\r\n  dayLabel: {\r\n    en: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    ko: ['일', '월', '화', '수', '목', '금', '토'],\r\n  },\r\n  getDayName(dow, country) {\r\n    if (Object.keys(this.dayLabel).includes(country)) {\r\n      return this.dayLabel[country][dow];\r\n    }\r\n    return this.dayLabel.en.dow;\r\n  },\r\n  toLuxon(a) {\r\n    return DateTime.fromJSDate(new Date(a));\r\n  },\r\n};\r\n\r\nexport default datetime;\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { Container, Input, MenuItem, Select } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider, DateTimePicker } from '@material-ui/pickers';\r\nimport LuxonUtils from '@date-io/luxon';\r\nimport { DateTime } from 'luxon';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { ColorPalette } from 'material-ui-color';\r\n\r\nconst palette = {\r\n  IndianRed: '#CD5C5C',\r\n  Crimson: '#DC143C',\r\n  Tomato: '#FF6347',\r\n  Gold: '#FFD700',\r\n  Magenta: '#FF00FF',\r\n  RebeccaPurple: '#663399',\r\n  Indigo: '#4B0082',\r\n  Lime: '#00FF00',\r\n  ForestGreen: '#228B22',\r\n  SaddleBrown: '#8B4513',\r\n};\r\n\r\nconst CreateDialogComponent = ({ setOpen, addEvent, defaultSettings, categoryList }) => {\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xs'));\r\n  const [title, setTitle] = React.useState();\r\n  const [selectedStartDate, setSelectedStartDate] = React.useState();\r\n  const [selectedEndDate, setSelectedEndDate] = React.useState();\r\n  const [allDay, setAllDay] = React.useState(false);\r\n  const [important, setImportant] = React.useState();\r\n  const [category, setCategory] = React.useState('default');\r\n  const [place, setPlace] = React.useState();\r\n  const [color, setColor] = React.useState('black');\r\n\r\n  React.useEffect(() => {\r\n    setTitle('');\r\n    setPlace('');\r\n    if (defaultSettings && defaultSettings.start) {\r\n      setSelectedStartDate(DateTime.fromISO(defaultSettings.start));\r\n    } else {\r\n      setSelectedStartDate(DateTime.local());\r\n    }\r\n    if (defaultSettings && defaultSettings.end) {\r\n      setSelectedEndDate(DateTime.fromISO(defaultSettings.end));\r\n    } else {\r\n      setSelectedEndDate(DateTime.local().plus({ minutes: 30 }));\r\n    }\r\n    if (defaultSettings && defaultSettings.allDay) {\r\n      setAllDay(true);\r\n    } else {\r\n      setAllDay(false);\r\n    }\r\n    if (defaultSettings && defaultSettings.important) {\r\n      setImportant(true);\r\n    } else {\r\n      setImportant(false);\r\n    }\r\n    if (defaultSettings && defaultSettings.category) {\r\n      setCategory(defaultSettings.category);\r\n    }\r\n  }, [defaultSettings]);\r\n\r\n  const handleStartDateChange = date => {\r\n    setSelectedStartDate(date);\r\n  };\r\n\r\n  const handleEndDateChange = date => {\r\n    setSelectedEndDate(date);\r\n  };\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  function handleSave() {\r\n    const isAllDay = (selectedEndDate - selectedStartDate) / (60 * 60 * 1000) >= 24;\r\n    const eventInfo = {\r\n      start: selectedStartDate.toISO(),\r\n      end: selectedEndDate.toISO(),\r\n      important,\r\n      title:\r\n        title.trim() === '' ? '(제목없음)' : important === true ? title.concat('(중요)') : title,\r\n      allDay: allDay || isAllDay,\r\n      place,\r\n      forceAllDay: allDay,\r\n      color,\r\n      category,\r\n    };\r\n    addEvent(eventInfo);\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleTitle = event => {\r\n    setTitle(event.target.value);\r\n  };\r\n\r\n  const handleAllDayChange = event => {\r\n    setAllDay(event.target.checked);\r\n  };\r\n\r\n  const handleImportantChange = event => {\r\n    setImportant(event.target.checked);\r\n  };\r\n  const handlePlaceChange = event => {\r\n    setPlace(event.target.value);\r\n  };\r\n\r\n  const handleChange = event => {\r\n    setCategory(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      fullScreen={fullScreen}\r\n      open\r\n      onClose={handleClose}\r\n      aria-labelledby=\"responsive-create-dialog\"\r\n    >\r\n      <DialogTitle id=\"responsive-dialog-title\">새 일정</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>\r\n          {categoryList && (\r\n            <Container>\r\n              <Select value={category} onChange={handleChange}>\r\n                {categoryList.map(item => (\r\n                  <MenuItem value={item}>{item === 'default' ? '기본 캘린더' : item}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </Container>\r\n          )}\r\n          <Container>\r\n            <Grid container>\r\n              <Input\r\n                autoFocus\r\n                placeholder=\"제목을 입력해주세요\"\r\n                value={title}\r\n                onChangeCapture={handleTitle}\r\n              />\r\n              <FormControlLabel\r\n                control={<Checkbox checked={allDay} onChange={handleAllDayChange} name=\"allDay\" />}\r\n                label=\"종일\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox checked={important} onChange={handleImportantChange} name=\"important\" />\r\n                }\r\n                label=\"중요\"\r\n              />\r\n            </Grid>\r\n          </Container>\r\n          <Container>\r\n            <MuiPickersUtilsProvider utils={LuxonUtils}>\r\n              <Grid container justify=\"space-around\">\r\n                <DateTimePicker\r\n                  margin=\"normal\"\r\n                  id=\"create-datetime-picker\"\r\n                  label=\"시작 날짜 시간\"\r\n                  format=\"yyyy-MM-dd HH:mm:ss\"\r\n                  value={selectedStartDate}\r\n                  onChange={handleStartDateChange}\r\n                />\r\n                <DateTimePicker\r\n                  margin=\"normal\"\r\n                  id=\"end-datetime-picker\"\r\n                  label=\"끝 날짜 시간\"\r\n                  format=\"yyyy-MM-dd HH:mm:ss\"\r\n                  value={selectedEndDate}\r\n                  onChange={handleEndDateChange}\r\n                />\r\n              </Grid>\r\n            </MuiPickersUtilsProvider>\r\n          </Container>\r\n          <Container>\r\n            <Input placeholder=\"장소를 입력해주세요\" value={place} onChange={handlePlaceChange} />\r\n          </Container>\r\n          <Container>\r\n            <ColorPalette palette={palette} value={color} onSelect={setColor} />\r\n          </Container>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"secondary\">\r\n          취소\r\n        </Button>\r\n        <Button onClick={handleSave} color=\"primary\">\r\n          저장\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport const CreateDialog = observer(CreateDialogComponent);\r\n","import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { Container, DialogContentText, Grid, Input, FormControlLabel, Checkbox, Button } from '@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport { MuiPickersUtilsProvider, DateTimePicker } from '@material-ui/pickers';\r\nimport LuxonUtils from '@date-io/luxon';\r\nimport { ColorPalette } from 'material-ui-color';\r\nimport { DateTime } from 'luxon';\r\n\r\nconst ViewDialogComponent = ({ setOpen, event, deleteEvent, editEvent }) => {\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xs'));\r\n  const [title, setTitle] = React.useState();\r\n  const [selectedStartDate, setSelectedStartDate] = React.useState();\r\n  const [selectedEndDate, setSelectedEndDate] = React.useState();\r\n  const [allDay, setAllDay] = React.useState(false);\r\n  const [important, setImportant] = React.useState();\r\n  const [place, setPlace] = React.useState();\r\n  const [color, setColor] = React.useState('black');\r\n  const [editFlag, setEditFlag] = React.useState(false);\r\n\r\n  const palette = {\r\n    IndianRed: '#CD5C5C',\r\n    Crimson: '#DC143C',\r\n    Tomato: '#FF6347',\r\n    Gold: '#FFD700',\r\n    Magenta: '#FF00FF',\r\n    RebeccaPurple: '#663399',\r\n    Indigo: '#4B0082',\r\n    Lime: '#00FF00',\r\n    ForestGreen: '#228B22',\r\n    SaddleBrown: '#8B4513',\r\n  };\r\n\r\n  function handleSave() {\r\n    const isAllDay = (selectedEndDate - selectedStartDate) / (60 * 60 * 1000) >= 24;\r\n\r\n    const editInfo = {\r\n      type: 'list',\r\n      id: event.id,\r\n      title: event.title,\r\n      start: event.startStr,\r\n      end: event.endStr,\r\n      allDay: event.allDay,\r\n      display: event.display,\r\n      place: event.extendedProps.place,\r\n      forceAllDay: event.forceAllDay,\r\n      color: event.color,\r\n    };\r\n\r\n    const eventInfo = {\r\n      start: selectedStartDate.toISO(),\r\n      end: selectedEndDate.toISO(),\r\n      important,\r\n      title:\r\n        title.trim() === ''\r\n          ? '(제목없음)'\r\n          : important === true && !title.includes('(중요')\r\n          ? title.concat('(중요)')\r\n          : title,\r\n      allDay: allDay || isAllDay,\r\n      place,\r\n      forceAllDay: allDay,\r\n      color,\r\n    };\r\n    editEvent(editInfo.id, eventInfo);\r\n    setOpen(false);\r\n  }\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n  const handleTitle = event => {\r\n    setTitle(event.target.value);\r\n  };\r\n\r\n  const handleAllDayChange = event => {\r\n    setAllDay(event.target.checked);\r\n  };\r\n\r\n  const handleImportantChange = event => {\r\n    setImportant(event.target.checked);\r\n  };\r\n  const handlePlaceChange = event => {\r\n    setPlace(event.target.value);\r\n  };\r\n  const handleStartDateChange = date => {\r\n    setSelectedStartDate(date);\r\n  };\r\n\r\n  const handleEndDateChange = date => {\r\n    setSelectedEndDate(date);\r\n  };\r\n\r\n  const useStyles = makeStyles(theme => ({\r\n    marginIcon: {\r\n      marginLeft: 200,\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  function nvl(str, defaultStr) {\r\n    if (typeof str === 'undefined' || str === null || str === '') str = '';\r\n    else if (str.includes('(중요)')) str = str.replace('(중요)', '');\r\n    return str;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Dialog fullScreen={fullScreen} open={true} onClose={handleClose} aria-labelledby=\"responsive-view-dialog\">\r\n        <DialogTitle id=\"responsive-dialog-title\" style={{ textAlign: 'left' }}>\r\n          {' '}\r\n          일정\r\n          <IconButton\r\n            className={classes.marginIcon}\r\n            aria-label=\"edit-button\"\r\n            onClick={() => {\r\n              setEditFlag(true);\r\n              setTitle(nvl(event.title));\r\n              setPlace(nvl(event.extendedProps?.place));\r\n              setSelectedStartDate(DateTime.fromISO(event.startStr));\r\n              setSelectedEndDate(DateTime.fromISO(event.endStr));\r\n              setAllDay(event.allDay);\r\n              setImportant(event.extendedProps.important);\r\n            }}\r\n          >\r\n            <EditOutlinedIcon />\r\n          </IconButton>\r\n          <IconButton\r\n            aria-label=\"delete-button\"\r\n            onClick={() => {\r\n              deleteEvent(event.id);\r\n              handleClose();\r\n            }}\r\n          >\r\n            <DeleteOutlineIcon color=\"error\" />\r\n          </IconButton>\r\n          <IconButton aria-label=\"mail-button\">\r\n            <MailOutlineIcon color=\"primary\" />\r\n          </IconButton>\r\n          <IconButton aria-label=\"close\" onClick={handleClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </DialogTitle>\r\n        {editFlag && (\r\n          <>\r\n            <DialogContent>\r\n              <DialogContentText>\r\n                <Container>\r\n                  <Grid container>\r\n                    <Input autoFocus placeholder=\"제목을 입력해주세요\" value={title} onChangeCapture={handleTitle} />\r\n                    <FormControlLabel\r\n                      control={<Checkbox checked={allDay} onChange={handleAllDayChange} name=\"allDay\" />}\r\n                      label=\"종일\"\r\n                    />\r\n                    <FormControlLabel\r\n                      control={<Checkbox checked={important} onChange={handleImportantChange} name=\"important\" />}\r\n                      label=\"중요\"\r\n                    />\r\n                  </Grid>\r\n                </Container>\r\n                <Container>\r\n                  <MuiPickersUtilsProvider utils={LuxonUtils}>\r\n                    <Grid container justify=\"space-around\">\r\n                      <DateTimePicker\r\n                        margin=\"normal\"\r\n                        id=\"edit-datetime-picker\"\r\n                        label=\"시작 날짜 시간\"\r\n                        format=\"yyyy-MM-dd HH:mm:ss\"\r\n                        value={selectedStartDate}\r\n                        onChange={handleStartDateChange}\r\n                      />\r\n                      <DateTimePicker\r\n                        margin=\"normal\"\r\n                        id=\"end-datetime-picker\"\r\n                        label=\"끝 날짜 시간\"\r\n                        format=\"yyyy-MM-dd HH:mm:ss\"\r\n                        value={selectedEndDate}\r\n                        onChange={handleEndDateChange}\r\n                      />\r\n                    </Grid>\r\n                  </MuiPickersUtilsProvider>\r\n                </Container>\r\n                <Container>\r\n                  <Input placeholder=\"장소를 입력해주세요\" value={place} onChange={handlePlaceChange} />\r\n                </Container>\r\n                <Container>\r\n                  <ColorPalette palette={palette} value={color} onSelect={setColor} />\r\n                </Container>\r\n              </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={handleClose} color=\"secondary\">\r\n                취소\r\n              </Button>\r\n              <Button onClick={handleSave} color=\"primary\">\r\n                저장\r\n              </Button>\r\n            </DialogActions>\r\n          </>\r\n        )}\r\n        {editFlag === false && (\r\n          <DialogContent style={{ height: '200px' }} dividers>\r\n            <Container>{event.title}</Container>\r\n            <Container>{`${event.startStr} - ${event.endStr}`}</Container>\r\n            <Container>{event.importance}</Container>\r\n            <Container>{event.allDay}</Container>\r\n            <Container>{event.extendedProps?.place}</Container>\r\n          </DialogContent>\r\n        )}\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport const ViewDialog = ViewDialogComponent;\r\n","import axios from 'axios';\r\nimport localforage from 'localforage';\r\n\r\nasync function getHoliday(calendarId, apiKey, start, end) {\r\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?key=${apiKey}&timeMin=${start}&timeMax=${end}&singleEvents=true&maxResults=9999`;\r\n\r\n  const value = await localforage.getItem(url);\r\n  if (value) return value;\r\n\r\n  const response = await axios.get(url);\r\n  if (response.status === 200) {\r\n    localforage.setItem(url, response.data);\r\n    return response.data;\r\n  }\r\n  return { items: [] };\r\n}\r\n\r\nexport { getHoliday };\r\n","import React, { useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport listPlugin from '@fullcalendar/list';\r\nimport luxonPlugin from '@fullcalendar/luxon';\r\nimport rrulePlugin from '@fullcalendar/rrule';\r\nimport { getLunar } from 'holiday-kr';\r\nimport { Hidden } from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport { DateTime } from 'luxon';\r\nimport datetime from '../utils/datetime';\r\nimport { CreateDialog } from './createDialog';\r\nimport { ViewDialog } from './viewDialog';\r\nimport { getHoliday } from '../utils/apicall';\r\n\r\nconst GOOGLE_API_KEY = 'AIzaSyCWLalUqC46xX50wv6oBZiDUjWN4nJnAoE';\r\n\r\nlet touchStartX = 0;\r\nlet touchStartY = 0;\r\nlet touchEndX = 0;\r\nlet touchEndY = 0;\r\n\r\nconst CalendarComponent = ({\r\n  setter,\r\n  calendarRef,\r\n  locale,\r\n  lunar,\r\n  holiday,\r\n  minDurationMinutes,\r\n  focusDate,\r\n  events,\r\n  addEvent,\r\n  changeEvent,\r\n  deleteEvent,\r\n  editEvent,\r\n  categoryList,\r\n}) => {\r\n  const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n  const [viewDialogOpen, setViewDialogOpen] = React.useState(false);\r\n  const [defaultSettings, setDefaultSettings] = React.useState({});\r\n  const [event, setEvent] = React.useState({});\r\n  const [holidayList, setHolidayList] = React.useState([]);\r\n\r\n  const handleGesture = React.useCallback(() => {\r\n    if (calendarRef.current) {\r\n      const deltaX = Math.abs(touchEndX - touchStartX);\r\n      const deltaY = Math.abs(touchEndY - touchStartY);\r\n      if (touchEndX <= touchStartX && deltaX > deltaY * 2) {\r\n        calendarRef.current.getApi().next();\r\n      }\r\n      if (touchEndX >= touchStartX && deltaX > deltaY * 2) {\r\n        calendarRef.current.getApi().prev();\r\n      }\r\n    }\r\n  }, [calendarRef]);\r\n\r\n  const handleTouchStart = React.useCallback(e => {\r\n    touchStartX = e.changedTouches[0].screenX;\r\n    touchStartY = e.changedTouches[0].screenY;\r\n  }, []);\r\n\r\n  const handleTouchEnd = React.useCallback(\r\n    e => {\r\n      touchEndX = e.changedTouches[0].screenX;\r\n      touchEndY = e.changedTouches[0].screenY;\r\n      handleGesture();\r\n    },\r\n    [handleGesture],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (calendarRef.current) {\r\n      const height = isNaN(window.innerHeight) ? window.clientHeight : window.innerHeight;\r\n      calendarRef.current.getApi().setOption('height', height - 85 > 700 ? 700 : height - 85);\r\n\r\n      document.querySelector('#calendar-layout').addEventListener('touchstart', handleTouchStart);\r\n      document.querySelector('#calendar-layout').addEventListener('touchend', handleTouchEnd);\r\n\r\n      return () => {\r\n        document\r\n          .querySelector('#calendar-layout')\r\n          .removeEventListener('touchstart', handleTouchStart);\r\n        document.querySelector('#calendar-layout').removeEventListener('touchend', handleTouchEnd);\r\n      };\r\n    }\r\n    return null;\r\n  }, [calendarRef, handleTouchEnd, handleTouchStart]);\r\n\r\n  function handleEventClick(clickInfo) {\r\n    setEvent(clickInfo.event);\r\n    setViewDialogOpen(true);\r\n  }\r\n\r\n  function handleDateSelect(selectInfo) {\r\n    const start = selectInfo.start.toISOString();\r\n    const end = selectInfo.end.toISOString();\r\n    const { allDay } = selectInfo;\r\n    setDefaultSettings({ start, end, allDay });\r\n    setCreateDialogOpen(true);\r\n  }\r\n\r\n  function handleDateClick(info) {\r\n    const { allDay } = info;\r\n    const start = DateTime.fromISO(info.dateStr);\r\n    let end = '';\r\n    // month\r\n    if (info.view.type.includes('dayGrid') || allDay) {\r\n      end = start.plus({ days: 1 });\r\n    } else {\r\n      end = start.plus({ minutes: minDurationMinutes });\r\n    }\r\n    setDefaultSettings({ start, end, allDay });\r\n    setCreateDialogOpen(true);\r\n  }\r\n\r\n  function handleEventChange(changeInfo) {\r\n    const { oldEvent, event } = changeInfo;\r\n    changeEvent(oldEvent.id, event);\r\n  }\r\n\r\n  function renderEventContent(eventContent) {}\r\n\r\n  function renderHeaderContent(content) {\r\n    const { text } = content;\r\n    const color = content.dow === 0 ? 'red' : 'black';\r\n\r\n    if (content.view.type === 'dayGrid' || content.view.type === 'dayGridMonth') {\r\n      return (\r\n        <>\r\n          <span style={{ color }}>{datetime.getDayName(content.dow, locale)}</span>\r\n        </>\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n        <span style={{ color }}>{text}</span>\r\n        <Hidden xsDown>\r\n          <span\r\n            style={{\r\n              color: 'silver',\r\n              fontSize: 'smaller',\r\n              paddingLeft: '3px',\r\n            }}\r\n          >\r\n            {lunar && `(${getLunar(content.date).month}/${getLunar(content.date).day})`}\r\n          </span>\r\n        </Hidden>\r\n        <Hidden smUp>\r\n          <span\r\n            style={{\r\n              color: 'silver',\r\n              fontSize: 'smaller',\r\n              paddingLeft: '3px',\r\n            }}\r\n          >\r\n            {lunar && `(${getLunar(content.date).day})`}\r\n          </span>\r\n        </Hidden>\r\n      </>\r\n    );\r\n  }\r\n\r\n  function renderDayContent(content) {\r\n    const color = content.dow === 0 ? 'red' : 'black';\r\n\r\n    if (content.view.type === 'timeGridWeek' || content.view.type === 'timeGridDay') {\r\n      return <></>;\r\n    }\r\n    return (\r\n      <>\r\n        <span style={{ color }}>{content.date.getDate()}</span>\r\n        <Hidden xsDown>\r\n          <span\r\n            style={{\r\n              color: 'silver',\r\n              fontSize: 'smaller',\r\n              paddingLeft: '3px',\r\n            }}\r\n          >\r\n            {lunar && `(${getLunar(content.date).month}/${getLunar(content.date).day})`}\r\n          </span>\r\n        </Hidden>\r\n        <Hidden smUp>\r\n          <span\r\n            style={{\r\n              color: 'silver',\r\n              fontSize: 'smaller',\r\n              paddingLeft: '3px',\r\n            }}\r\n          >\r\n            {lunar && `(${getLunar(content.date).day})`}\r\n          </span>\r\n        </Hidden>\r\n      </>\r\n    );\r\n  }\r\n\r\n  function onUpdateDates(dateInfo) {\r\n    const focusInLuxon = datetime.toLuxon(focusDate);\r\n    const currentStart = datetime.toLuxon(dateInfo.view.currentStart);\r\n    const currentEnd = datetime.toLuxon(dateInfo.view.currentEnd);\r\n\r\n    // check if focusDate is inside view range\r\n    if (!(focusInLuxon >= currentStart && focusInLuxon <= currentEnd)) {\r\n      setter.setFocusDate(currentStart.toISODate());\r\n    }\r\n    const viewType = dateInfo.view.type;\r\n    if (viewType === 'dayGridMonth') {\r\n      const { title } = dateInfo.view;\r\n      const [year, month] = title.split('/');\r\n      setter.setTitle(`${year}년 ${month}월`);\r\n    } else if (viewType === 'timeGridDay') {\r\n      const [Y, M, D] = dateInfo.view.title.split('/');\r\n      setter.setTitle(`${Y}년 ${M}월 ${D}일`);\r\n    } else {\r\n      const [start, end] = dateInfo.view.title.split(' – ');\r\n      const [startY, startM] = start.split('/');\r\n      const [endY, endM] = end.split('/');\r\n\r\n      if (startY === endY) {\r\n        if (startM === endM) {\r\n          setter.setTitle(`${startY}년 ${startM}월`);\r\n        } else {\r\n          setter.setTitle(`${startY}년 ${startM}월 - ${endM}월`);\r\n        }\r\n      } else {\r\n        setter.setTitle(`${startY}년 ${startM}월 - ${endY}년 ${endM}월`);\r\n      }\r\n    }\r\n    getHoliday(\r\n      'ko.south_korea%23holiday%40group.v.calendar.google.com',\r\n      GOOGLE_API_KEY,\r\n      `${currentStart.toISODate()}T00%3A00%3A00%2B09%3A00`,\r\n      `${currentEnd.toISODate()}T00%3A00%3A00%2B09%3A00`,\r\n    )\r\n      .then(data => {\r\n        const { items } = data;\r\n        const holidays = [];\r\n        items.forEach(item => {\r\n          holidays.push({\r\n            title: item.summary,\r\n            start: item.start.date,\r\n            end: item.end.date,\r\n            allDay: true,\r\n            color: 'red',\r\n            display: 'block',\r\n          });\r\n        });\r\n        setHolidayList(holidays);\r\n      })\r\n      .catch(e => {\r\n        console.error(e);\r\n        setHolidayList([]);\r\n      });\r\n  }\r\n\r\n  function handleNavLinkDayClick(date) {\r\n    if (calendarRef && calendarRef.current) {\r\n      calendarRef.current.getApi().changeView('timeGrid', date);\r\n      setter.setViewType('timeGridDay');\r\n    }\r\n  }\r\n\r\n  function handleUrlImport() {\r\n    const url = prompt('Enter iCal URL: ');\r\n    axios.get(url).then(data => console.log(data));\r\n  }\r\n\r\n  function handleSelectAllow(info) {\r\n    if (info.allDay) return true;\r\n    let { start, end, startStr, endStr } = info;\r\n    startStr = startStr.split('+')[0];\r\n    endStr = endStr.split('+')[0];\r\n    if (endStr.split('T')[1] === '00:00:00') {\r\n      return end - start <= 1000 * 60 * 60 * 24;\r\n    }\r\n    return endStr.split('T')[0] === startStr.split('T')[0];\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <FullCalendar\r\n        ref={calendarRef}\r\n        plugins={[\r\n          dayGridPlugin,\r\n          timeGridPlugin,\r\n          interactionPlugin,\r\n          luxonPlugin,\r\n          rrulePlugin,\r\n          listPlugin,\r\n        ]}\r\n        headerToolbar={false}\r\n        locale={locale}\r\n        initialView=\"dayGridMonth\"\r\n        nowIndicator\r\n        titleFormat=\"{yyyy/MM/dd}\"\r\n        buttonIcons\r\n        firstDay={0}\r\n        navLinks\r\n        editable\r\n        selectable\r\n        selectMirror\r\n        dayMaxEvents\r\n        dayMaxEventRows={6}\r\n        slotDuration={{ minutes: minDurationMinutes }}\r\n        slotLabelInterval=\"01:00\"\r\n        slotEventOverlap={false}\r\n        events={holiday ? [...holidayList, ...events.slice()] : events.slice()}\r\n        select={handleDateSelect}\r\n        dateClick={handleDateClick}\r\n        eventContent={renderEventContent}\r\n        eventClick={handleEventClick}\r\n        eventChange={handleEventChange}\r\n        fixedWeekCount={false}\r\n        datesSet={onUpdateDates}\r\n        allDayText=\"종일\"\r\n        moreLinkText=\"\"\r\n        dayHeaderContent={renderHeaderContent}\r\n        dayCellContent={renderDayContent}\r\n        allDayMaintainDuration\r\n        navLinkDayClick={handleNavLinkDayClick}\r\n        unselectAuto\r\n        unselectCancel=\".MuiDialogContent-root\"\r\n        selectAllow={handleSelectAllow}\r\n        dragScroll={false}\r\n        progressiveEventRendering\r\n      />\r\n      {createDialogOpen && (\r\n        <CreateDialog\r\n          defaultSettings={defaultSettings}\r\n          addEvent={addEvent}\r\n          setOpen={setCreateDialogOpen}\r\n          categoryList={categoryList}\r\n        />\r\n      )}\r\n      {viewDialogOpen && (\r\n        <ViewDialog\r\n          setOpen={setViewDialogOpen}\r\n          event={event}\r\n          deleteEvent={deleteEvent}\r\n          editEvent={editEvent}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst Calendar = observer(CalendarComponent);\r\nexport default Calendar;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const sidebarStyles = makeStyles(theme => ({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  title: {\r\n    marginRight: '25px',\r\n  },\r\n  yearMonth: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n","const languageSet = {\r\n  month: '월',\r\n  week: '주',\r\n  day: '일',\r\n  list: '목록',\r\n  calendar: '캘린더',\r\n  today: '오늘',\r\n  lunar: '음력',\r\n  holiday: '공휴일',\r\n  defaultCalendar: '기본 캘린더',\r\n  importCalendar: '캘린더 불러오기',\r\n  newCalendar: '새 캘린더 추가',\r\n  'enter-new-category': '새 캘린더 이름 입력해주세요',\r\n};\r\n\r\nexport default { translation: languageSet };\r\n","const languageSet = {\r\n  calendar: 'Calendar',\r\n  defaultCalendar: 'My Calendar',\r\n  importCalendar: 'Import Calendar',\r\n  newCalendar: 'Add new calendar',\r\n  'enter-new-category': 'Enter new calendar name',\r\n};\r\n\r\nexport default { translation: languageSet };\r\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport { ko, en } from './index';\r\n\r\nconst init = () => {\r\n  i18n\r\n    .use(initReactI18next) // passes i18n down to react-i18next\r\n    .init({\r\n      resources: {\r\n        en,\r\n        ko,\r\n      },\r\n      lng: 'en',\r\n      fallbackLng: 'en',\r\n\r\n      interpolation: {\r\n        escapeValue: false,\r\n      },\r\n    });\r\n};\r\n\r\nconst changeLanguage = language => {\r\n  i18n.changeLanguage(language);\r\n};\r\n\r\nexport { init, changeLanguage };\r\n","import React from 'react';\r\nimport { observable } from 'mobx';\r\nimport { persist, create } from 'mobx-persist';\r\nimport clsx from 'clsx';\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Select from '@material-ui/core/Select';\r\nimport { Button, Checkbox, Hidden } from '@material-ui/core';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport useLocalStorage from 'react-use-localstorage';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { DateTime } from 'luxon';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Calendar from './components/calendar';\r\nimport { sidebarStyles } from './styles/sidebar';\r\nimport { init as initi18n, changeLanguage } from './i18n/init';\r\n\r\niniti18n();\r\nconst data = observable({\r\n  maxId: 0,\r\n  events: [],\r\n  categories: [],\r\n});\r\n\r\nconst schema = {\r\n  maxId: true,\r\n  categories: { type: 'list', schema: { name: true, show: true, color: true } },\r\n  events: {\r\n    type: 'list',\r\n    schema: {\r\n      id: true,\r\n      title: true,\r\n      start: true,\r\n      end: true,\r\n      allDay: true,\r\n      display: true,\r\n      place: true,\r\n      forceAllDay: true,\r\n      color: true,\r\n      category: true,\r\n      important: true,\r\n    },\r\n  },\r\n};\r\n\r\nconst store = persist(schema)(data);\r\n\r\nconst hydrate = create();\r\nhydrate('zerostrengthCalendar', store);\r\n\r\n// actions\r\nfunction addEvent(event) {\r\n  store.events.push({ ...event, ...{ id: store.maxId } });\r\n  store.maxId += 1;\r\n}\r\nfunction changeEvent(id, changeInfo) {\r\n  store.events.forEach(item => {\r\n    if (Number(item.id) === Number(id)) {\r\n      const start = DateTime.fromISO(changeInfo.startStr);\r\n      const end = DateTime.fromISO(changeInfo.endStr);\r\n      const isAllDay = (end - start) / (60 * 60 * 1000) >= 24;\r\n      item.start = start.toISO();\r\n      item.end = end.toISO();\r\n      item.allDay = item.forceAllDay || isAllDay;\r\n    }\r\n  });\r\n}\r\nfunction deleteEvent(id) {\r\n  for (let i = 0; i < store.events.length; i += 1) {\r\n    if (Number(store.events[i].id) === Number(id)) {\r\n      store.events.splice(i, 1);\r\n      return;\r\n    }\r\n  }\r\n}\r\nfunction editEvent(id, editInfo) {\r\n  for (let i = 0; i < store.events.length; i += 1) {\r\n    if (Number(store.events[i].id) === Number(id)) {\r\n      store.events[i].title = editInfo.title;\r\n      store.events[i].startStr = editInfo.startStr;\r\n      store.events[i].endStr = editInfo.endStr;\r\n      store.events[i].place = editInfo.place;\r\n      store.events[i].important = editInfo.important;\r\n    }\r\n  }\r\n}\r\nfunction addCategory(category) {\r\n  const f = store.categories.filter(item => item.name === category);\r\n  if (f.length === 0) {\r\n    store.categories.push({ name: category, show: true });\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction filterEvents(events) {\r\n  if (store.categories.length === 0) addCategory('default');\r\n  const categoriesToShow = store.categories.filter(item => item.show === true);\r\n  const categoryList = categoriesToShow.map(item => item.name);\r\n\r\n  const newEvents = events.filter(item => categoryList.includes(item.category));\r\n  return newEvents;\r\n}\r\n\r\nconst App = observer(() => {\r\n  const classes = sidebarStyles();\r\n  const [state, setState] = React.useState({ left: false });\r\n  const ref = React.createRef(); // calendar ref\r\n  const [title, setTitle] = React.useState('');\r\n  const [viewType, setViewType] = useLocalStorage('calendarViewType', 'dayGridMonth');\r\n  const [lunar, setLunar] = useLocalStorage('calendarLunar', 'false');\r\n  const [holiday, setHoliday] = useLocalStorage('calendarHoliday', 'true');\r\n  const [focusDate, setFocusDate] = useLocalStorage(\r\n    'calendarFocusDate',\r\n    DateTime.local().toISODate(),\r\n  );\r\n  const [language, setLanguage] = useLocalStorage('calendarLanguage', 'en');\r\n  const { t } = useTranslation();\r\n\r\n  React.useEffect(() => {\r\n    changeLanguage(language);\r\n  }, [language]);\r\n\r\n  React.useEffect(() => {\r\n    ref.current.getApi().changeView(viewType);\r\n    ref.current.getApi().gotoDate(focusDate);\r\n  }, [ref, focusDate, viewType]);\r\n\r\n  const toggleDrawer = (anchor, open) => event => {\r\n    if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const handlePrevClick = () => {\r\n    ref.current.getApi().prev();\r\n  };\r\n\r\n  const handleNextClick = () => {\r\n    ref.current.getApi().next();\r\n  };\r\n\r\n  const handleTodayClick = () => {\r\n    ref.current.getApi().today();\r\n    setFocusDate(DateTime.local().toISODate());\r\n  };\r\n\r\n  const handleViewChange = e => {\r\n    setViewType(e.target.value);\r\n  };\r\n\r\n  const handleLunarChange = e => {\r\n    setLunar(String(e.target.checked));\r\n  };\r\n\r\n  const handleHolidayChange = e => {\r\n    setHoliday(String(e.target.checked));\r\n  };\r\n\r\n  const handleCategoryChange = (e, name) => {\r\n    const { checked } = e.target;\r\n    const target = store.categories.filter(item => item.name === name);\r\n    if (target.length === 1) {\r\n      target[0].show = checked;\r\n    }\r\n  };\r\n\r\n  const Sider = anchor => (\r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n      })}\r\n      role=\"presentation\"\r\n      onKeyDown={toggleDrawer(anchor, false)}\r\n    >\r\n      <Hidden smUp>\r\n        <List>\r\n          {[\r\n            [t('month'), 'dayGridMonth'],\r\n            [t('week'), 'timeGridWeek'],\r\n            [t('day'), 'timeGridDay'],\r\n            [t('list'), 'listWeek'],\r\n          ].map((item, index) => (\r\n            <ListItem\r\n              selected={viewType === item[1]}\r\n              button\r\n              key={index}\r\n              onClick={() => setViewType(item[1])}\r\n            >\r\n              {item[0]}\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <Divider />\r\n      </Hidden>\r\n      <List>\r\n        <ListItem>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={lunar === 'true'}\r\n                onChange={handleLunarChange}\r\n                name=\"lunar_check\"\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label={t('lunar')}\r\n          />\r\n        </ListItem>\r\n        <ListItem>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                checked={holiday === 'true'}\r\n                onChange={handleHolidayChange}\r\n                name=\"holiday_check\"\r\n                color=\"primary\"\r\n              />\r\n            }\r\n            label={t('holiday')}\r\n          />\r\n        </ListItem>\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {store.categories.map(category => (\r\n          <ListItem key={category.name}>\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={category.show}\r\n                  name={category.name}\r\n                  onChange={e => handleCategoryChange(e, category.name)}\r\n                  color=\"primary\"\r\n                />\r\n              }\r\n              label={category.name === 'default' ? t('defaultCalendar') : category.name}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n        <ListItem>\r\n          <Button\r\n            onClick={() => {\r\n              const name = prompt(t('enter-new-category'));\r\n              if (name.trim() !== '') {\r\n                addCategory(name.trim());\r\n              }\r\n            }}\r\n          >\r\n            + {t('newCalendar')}\r\n          </Button>\r\n        </ListItem>\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        <ListItem>{t('importCalendar')}</ListItem>\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {[\r\n          ['English', 'en'],\r\n          ['Korean', 'ko'],\r\n        ].map((item, index) => (\r\n          <ListItem\r\n            selected={language === item[1]}\r\n            button\r\n            key={index}\r\n            onClick={() => setLanguage(item[1])}\r\n          >\r\n            {item[0]}\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <IconButton\r\n            onClick={toggleDrawer('left', true)}\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Hidden xsDown>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              {t('calendar')}\r\n            </Typography>\r\n            <IconButton\r\n              onClick={handleTodayClick}\r\n              color=\"inherit\"\r\n              aria-label=\"today-button\"\r\n              edge=\"start\"\r\n            >\r\n              {t('today')}\r\n            </IconButton>\r\n            <IconButton\r\n              onClick={handlePrevClick}\r\n              color=\"inherit\"\r\n              aria-label=\"arrow-left\"\r\n              edge=\"start\"\r\n            >\r\n              <NavigateBeforeIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              onClick={handleNextClick}\r\n              color=\"inherit\"\r\n              aria-label=\"arrow-right\"\r\n              edge=\"start\"\r\n            >\r\n              <NavigateNextIcon />\r\n            </IconButton>\r\n          </Hidden>\r\n          <Typography variant=\"h6\" className={classes.yearMonth}>\r\n            {title}\r\n          </Typography>\r\n          <Hidden xsDown>\r\n            <Select\r\n              labelId=\"language-change-label\"\r\n              id=\"language-change-id\"\r\n              value={language}\r\n              onChange={e => {\r\n                setLanguage(e.target.value);\r\n              }}\r\n            >\r\n              <MenuItem value=\"en\">English</MenuItem>\r\n              <MenuItem value=\"ko\">Korean</MenuItem>\r\n            </Select>\r\n            <Select\r\n              labelId=\"demo-simple-select-label\"\r\n              id=\"demo-simple-select\"\r\n              value={viewType}\r\n              onChange={handleViewChange}\r\n            >\r\n              <MenuItem value=\"dayGridMonth\">월</MenuItem>\r\n              <MenuItem value=\"timeGridWeek\">주</MenuItem>\r\n              <MenuItem value=\"timeGridDay\">일</MenuItem>\r\n              <MenuItem value=\"listWeek\">목록</MenuItem>\r\n            </Select>\r\n          </Hidden>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <>\r\n        <SwipeableDrawer\r\n          anchor=\"left\"\r\n          open={state.left}\r\n          onClose={toggleDrawer('left', false)}\r\n          onOpen={toggleDrawer('left', true)}\r\n        >\r\n          {Sider('left')}\r\n        </SwipeableDrawer>\r\n      </>\r\n      <main\r\n        id=\"calendar-layout\"\r\n        style={{ marginTop: '75px', marginLeft: '20px', marginRight: '20px' }}\r\n      >\r\n        <Calendar\r\n          minDurationMinutes={30}\r\n          setter={{ setTitle, setViewType, setFocusDate }}\r\n          lunar={lunar === 'true'}\r\n          holiday={holiday === 'true'}\r\n          calendarRef={ref}\r\n          locale={language}\r\n          focusDate={focusDate}\r\n          events={filterEvents(store.events)}\r\n          categoryList={store.categories.map(item => item.name)}\r\n          changeEvent={changeEvent}\r\n          addEvent={addEvent}\r\n          deleteEvent={deleteEvent}\r\n          editEvent={editEvent}\r\n        />\r\n      </main>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App />\r\n  </>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}