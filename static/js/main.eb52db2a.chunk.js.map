{"version":3,"sources":["utils/datetime.js","components/createDialog.js","components/calendar.js","App.js","serviceWorker.js","index.js"],"names":["datetime","dayLabel","en","ko","getDayName","dow","country","Object","keys","this","includes","CreateDialog","observer","open","setOpen","addEvent","defaultSettings","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","React","useState","title","setTitle","selectedStartDate","setSelectedStartDate","selectedEndDate","setSelectedEndDate","allDay","setAllDay","place","setPlace","useEffect","start","DateTime","fromISO","local","end","plus","minutes","handleClose","Dialog","onClose","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","Container","Grid","container","Input","autoFocus","placeholder","value","onChangeCapture","event","target","FormControlLabel","control","Checkbox","checked","onChange","name","label","utils","LuxonUtils","justify","DateTimePicker","margin","format","date","DialogActions","Button","onClick","color","eventInfo","toISO","trim","data","observable","maxId","events","state","persist","type","schema","display","zerostrengthCalendar","push","touchStartX","touchStartY","touchEndX","touchEndY","Calendar","setter","calendarRef","locale","lunar","minDurationMinutes","createDialogOpen","setCreateDialogOpen","setDefaultSettings","handleTouchStart","changedTouches","screenX","screenY","handleTouchEnd","current","deltaX","Math","abs","deltaY","getApi","next","prev","handleGesture","view","height","isNaN","window","innerHeight","clientHeight","setOption","document","querySelector","addEventListener","removeEventListener","ref","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","luxonPlugin","rrulePlugin","listPlugin","headerToolbar","initialView","nowIndicator","titleFormat","buttonIcons","firstDay","navLinks","editable","selectable","selectMirror","dayMaxEvents","dayMaxEventRows","slotDuration","slotLabelInterval","slotEventOverlap","slice","select","selectInfo","toISOString","dateClick","info","dateStr","days","eventContent","eventClick","clickInfo","console","log","eventChange","changeInfo","revert","fixedWeekCount","datesSet","allDayText","moreLinkText","dayHeaderContent","content","text","style","Hidden","xsDown","fontSize","paddingLeft","getLunar","month","day","smUp","dayCellContent","getDate","allDayMaintainDuration","navLinkDayClick","changeView","setViewType","unselectAuto","unselectCancel","selectAllow","startStr","endStr","split","dragScroll","create","hydrate","useStyles","makeStyles","list","width","fullList","root","marginRight","yearMonth","flexGrow","App","classes","left","setState","createRef","useLocalStorage","viewType","setLunar","anchor","toggleDrawer","key","handleLunarChange","e","String","AppBar","position","Toolbar","IconButton","aria-label","edge","Typography","variant","className","today","size","Select","labelId","MenuItem","Fragment","SwipeableDrawer","onOpen","clsx","role","onKeyDown","List","map","item","index","ListItem","selected","button","Divider","ListItemIcon","ListItemText","primary","marginTop","marginLeft","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eb52db2a.chunk.js","sourcesContent":["const datetime = {\r\n  dayLabel: { en: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'], ko: ['일', '월', '화', '수', '목', '금', '토'] },\r\n  getDayName(dow, country) {\r\n    if (Object.keys(this.dayLabel).includes(country)) {\r\n      return this.dayLabel[country][dow];\r\n    }\r\n    return this.dayLabel.en.dow;\r\n  },\r\n};\r\n\r\nexport default datetime;\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { Container, Input } from '@material-ui/core';\r\nimport { MuiPickersUtilsProvider, DateTimePicker } from '@material-ui/pickers';\r\nimport LuxonUtils from '@date-io/luxon';\r\nimport { DateTime } from 'luxon';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n\r\nconst CreateDialogComponent = ({ open, setOpen, addEvent, defaultSettings }) => {\r\n  const theme = useTheme();\r\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xs'));\r\n  const [title, setTitle] = React.useState();\r\n  const [selectedStartDate, setSelectedStartDate] = React.useState();\r\n  const [selectedEndDate, setSelectedEndDate] = React.useState();\r\n  const [allDay, setAllDay] = React.useState(false);\r\n  const [place, setPlace] = React.useState();\r\n\r\n  React.useEffect(() => {\r\n    if (open === true) {\r\n      setTitle('');\r\n      setPlace('');\r\n      if (defaultSettings && defaultSettings.start) {\r\n        setSelectedStartDate(DateTime.fromISO(defaultSettings.start));\r\n      } else {\r\n        setSelectedStartDate(DateTime.local());\r\n      }\r\n      if (defaultSettings && defaultSettings.end) {\r\n        setSelectedEndDate(DateTime.fromISO(defaultSettings.end));\r\n      } else {\r\n        setSelectedEndDate(DateTime.local().plus({ minutes: 30 }));\r\n      }\r\n      if (defaultSettings && defaultSettings.allDay) {\r\n        setAllDay(true);\r\n      } else {\r\n        setAllDay(false);\r\n      }\r\n    }\r\n  }, [open, defaultSettings]);\r\n\r\n  const handleStartDateChange = date => {\r\n    setSelectedStartDate(date);\r\n  };\r\n\r\n  const handleEndDateChange = date => {\r\n    setSelectedEndDate(date);\r\n  };\r\n\r\n  function handleClose() {\r\n    setOpen(false);\r\n  }\r\n\r\n  function handleSave() {\r\n    const eventInfo = {\r\n      start: selectedStartDate.toISO(),\r\n      end: selectedEndDate.toISO(),\r\n      title: title.trim() === '' ? '(제목없음)' : title,\r\n      allDay,\r\n      place,\r\n    };\r\n    addEvent(eventInfo);\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleTitle = event => {\r\n    setTitle(event.target.value);\r\n  };\r\n\r\n  const handleAllDayChange = event => {\r\n    setAllDay(event.target.checked);\r\n  };\r\n\r\n  const handlePlaceChange = event => {\r\n    setPlace(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Dialog fullScreen={fullScreen} open={open} onClose={handleClose} aria-labelledby=\"responsive-create-dialog\">\r\n      <DialogTitle id=\"responsive-dialog-title\">새 일정</DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText>\r\n          <Container>\r\n            <Grid container>\r\n              <Input autoFocus placeholder=\"제목을 입력해주세요\" value={title} onChangeCapture={handleTitle} />\r\n              <FormControlLabel\r\n                control={<Checkbox checked={allDay} onChange={handleAllDayChange} name=\"allDay\" />}\r\n                label=\"종일\"\r\n              />\r\n            </Grid>\r\n          </Container>\r\n          <Container>\r\n            <MuiPickersUtilsProvider utils={LuxonUtils}>\r\n              <Grid container justify=\"space-around\">\r\n                <DateTimePicker\r\n                  margin=\"normal\"\r\n                  id=\"create-datetime-picker\"\r\n                  label=\"시작 날짜 시간\"\r\n                  format=\"yyyy-MM-dd HH:mm:ss\"\r\n                  value={selectedStartDate}\r\n                  onChange={handleStartDateChange}\r\n                />\r\n                <DateTimePicker\r\n                  margin=\"normal\"\r\n                  id=\"end-datetime-picker\"\r\n                  label=\"끝 날짜 시간\"\r\n                  format=\"yyyy-MM-dd HH:mm:ss\"\r\n                  value={selectedEndDate}\r\n                  onChange={handleEndDateChange}\r\n                />\r\n              </Grid>\r\n            </MuiPickersUtilsProvider>\r\n          </Container>\r\n          <Container>\r\n            <Container>\r\n              <Input placeholder=\"장소를 입력해주세요\" value={place} onChange={handlePlaceChange} />\r\n            </Container>\r\n          </Container>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"secondary\">\r\n          취소\r\n        </Button>\r\n        <Button onClick={handleSave} color=\"primary\">\r\n          저장\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport const CreateDialog = observer(CreateDialogComponent);\r\n","import React, { useEffect } from 'react';\r\nimport { observable } from 'mobx';\r\nimport { persist } from 'mobx-persist';\r\nimport { observer } from 'mobx-react-lite';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport listPlugin from '@fullcalendar/list';\r\nimport luxonPlugin from '@fullcalendar/luxon';\r\nimport rrulePlugin from '@fullcalendar/rrule';\r\nimport { getLunar } from 'holiday-kr';\r\nimport datetime from '../utils/datetime';\r\nimport { Hidden } from '@material-ui/core';\r\nimport { CreateDialog } from './createDialog';\r\nimport axios from 'axios';\r\nimport { DateTime } from 'luxon';\r\n\r\nconst data = observable({\r\n  maxId: 0,\r\n  events: [],\r\n});\r\n\r\nconst schema = {\r\n  maxId: true,\r\n  events: {\r\n    type: 'list',\r\n    schema: {\r\n      id: true,\r\n      title: true,\r\n      start: true,\r\n      end: true,\r\n      allDay: true,\r\n      display: true,\r\n      place: true,\r\n    },\r\n  },\r\n};\r\n\r\nconst state = persist(schema)(data);\r\nexport const zerostrengthCalendar = state;\r\n\r\n// actions\r\nfunction addEvent(event) {\r\n  state.events.push({ ...event, ...{ id: state.maxId } });\r\n  state.maxId += 1;\r\n}\r\n\r\n// end of actions\r\nlet touchStartX = 0;\r\nlet touchStartY = 0;\r\nlet touchEndX = 0;\r\nlet touchEndY = 0;\r\n\r\nconst CalendarComponent = ({ setter, calendarRef, locale, lunar, minDurationMinutes }) => {\r\n  const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n  const [defaultSettings, setDefaultSettings] = React.useState({});\r\n\r\n  useEffect(() => {\r\n    setter.setTitle(calendarRef.current.getApi().view.title);\r\n    const height = isNaN(window.innerHeight) ? window.clientHeight : window.innerHeight;\r\n    calendarRef.current.getApi().setOption('height', height - 85 > 700 ? 700 : height - 85);\r\n\r\n    document.querySelector('#calendar-layout').addEventListener('touchstart', handleTouchStart);\r\n    document.querySelector('#calendar-layout').addEventListener('touchend', handleTouchEnd);\r\n\r\n    return () => {\r\n      document.querySelector('#calendar-layout').removeEventListener('touchstart', handleTouchStart);\r\n      document.querySelector('#calendar-layout').removeEventListener('touchend', handleTouchEnd);\r\n    };\r\n  }, [calendarRef, setter]);\r\n\r\n  function handleGesture() {\r\n    if (calendarRef.current) {\r\n      const deltaX = Math.abs(touchEndX - touchStartX);\r\n      const deltaY = Math.abs(touchEndY - touchStartY);\r\n      if (touchEndX <= touchStartX && deltaX > deltaY * 2) {\r\n        calendarRef.current.getApi().next();\r\n      }\r\n      if (touchEndX >= touchStartX && deltaX > deltaY * 2) {\r\n        calendarRef.current.getApi().prev();\r\n      }\r\n    }\r\n  }\r\n\r\n  function handleTouchStart(event) {\r\n    touchStartX = event.changedTouches[0].screenX;\r\n    touchStartY = event.changedTouches[0].screenY;\r\n  }\r\n\r\n  function handleTouchEnd(event) {\r\n    touchEndX = event.changedTouches[0].screenX;\r\n    touchEndY = event.changedTouches[0].screenY;\r\n    handleGesture();\r\n  }\r\n\r\n  function handleEventClick(clickInfo) {\r\n    console.log(clickInfo.event.start);\r\n    console.log(clickInfo.event.end);\r\n    console.log(clickInfo.event.title);\r\n  }\r\n\r\n  function handleDateSelect(selectInfo) {\r\n    const start = selectInfo.start.toISOString();\r\n    const end = selectInfo.end.toISOString();\r\n    const allDay = selectInfo.allDay;\r\n    setDefaultSettings({ start, end, allDay });\r\n    setCreateDialogOpen(true);\r\n  }\r\n\r\n  function handleDateClick(info) {\r\n    const allDay = info.allDay;\r\n    const start = DateTime.fromISO(info.dateStr);\r\n    let end = '';\r\n    // month\r\n    if (info.view.type.includes('dayGrid') || allDay) {\r\n      end = start.plus({ days: 1 });\r\n    } else {\r\n      end = start.plus({ minutes: minDurationMinutes });\r\n    }\r\n    setDefaultSettings({ start, end, allDay });\r\n    setCreateDialogOpen(true);\r\n  }\r\n\r\n  function handleEventChange(changeInfo) {\r\n    changeInfo.revert();\r\n  }\r\n\r\n  function renderEventContent(eventContent) {}\r\n\r\n  function renderHeaderContent(content) {\r\n    let { text } = content;\r\n    const color = content.dow === 0 ? 'red' : 'black';\r\n\r\n    if (content.view.type === 'dayGrid' || content.view.type === 'dayGridMonth') {\r\n      return (\r\n        <>\r\n          <span style={{ color }}>{datetime.getDayName(content.dow, locale)}</span>\r\n        </>\r\n      );\r\n    }\r\n    return (\r\n      <>\r\n        <span style={{ color }}>{text}</span>\r\n        <Hidden xsDown>\r\n          <span\r\n            style={{\r\n              color: 'silver',\r\n              fontSize: 'smaller',\r\n              paddingLeft: '3px',\r\n            }}\r\n          >\r\n            {lunar === 'true' && `(${getLunar(content.date).month}/${getLunar(content.date).day})`}\r\n          </span>\r\n        </Hidden>\r\n        <Hidden smUp>\r\n          <span\r\n            style={{\r\n              color: 'silver',\r\n              fontSize: 'smaller',\r\n              paddingLeft: '3px',\r\n            }}\r\n          >\r\n            {lunar === 'true' && `(${getLunar(content.date).day})`}\r\n          </span>\r\n        </Hidden>\r\n      </>\r\n    );\r\n  }\r\n\r\n  function renderDayContent(content) {\r\n    const color = content.dow === 0 ? 'red' : 'black';\r\n\r\n    if (content.view.type === 'timeGridWeek' || content.view.type === 'timeGridDay') {\r\n      return <></>;\r\n    }\r\n    return (\r\n      <>\r\n        <span style={{ color }}>{content.date.getDate()}</span>\r\n        <Hidden xsDown>\r\n          <span\r\n            style={{\r\n              color: 'silver',\r\n              fontSize: 'smaller',\r\n              paddingLeft: '3px',\r\n            }}\r\n          >\r\n            {lunar === 'true' && `(${getLunar(content.date).month}/${getLunar(content.date).day})`}\r\n          </span>\r\n        </Hidden>\r\n        <Hidden smUp>\r\n          <span\r\n            style={{\r\n              color: 'silver',\r\n              fontSize: 'smaller',\r\n              paddingLeft: '3px',\r\n            }}\r\n          >\r\n            {lunar === 'true' && `(${getLunar(content.date).day})`}\r\n          </span>\r\n        </Hidden>\r\n      </>\r\n    );\r\n  }\r\n\r\n  function onUpdateDates() {\r\n    if (calendarRef && calendarRef.current) {\r\n      setter.setTitle(calendarRef.current.getApi().view.title);\r\n    }\r\n  }\r\n\r\n  function handleNavLinkDayClick(date) {\r\n    if (calendarRef && calendarRef.current) {\r\n      calendarRef.current.getApi().changeView('timeGrid', date);\r\n      setter.setViewType('timeGridDay');\r\n    }\r\n  }\r\n\r\n  function handleUrlImport() {\r\n    const url = prompt('Enter iCal URL: ');\r\n    axios.get(url).then(data => console.log(data));\r\n  }\r\n\r\n  function handleSelectAllow(info) {\r\n    if (info.allDay) return true;\r\n    let { start, end, startStr, endStr } = info;\r\n    startStr = startStr.split('+')[0];\r\n    endStr = endStr.split('+')[0];\r\n    if (endStr.split('T')[1] === '00:00:00') {\r\n      return end - start <= 1000 * 60 * 60 * 24;\r\n    }\r\n    return endStr.split('T')[0] === startStr.split('T')[0];\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <FullCalendar\r\n        ref={calendarRef}\r\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin, luxonPlugin, rrulePlugin, listPlugin]}\r\n        headerToolbar={false}\r\n        locale={locale}\r\n        initialView=\"dayGridMonth\"\r\n        nowIndicator\r\n        titleFormat=\"yyyy년 {MM}월\"\r\n        buttonIcons\r\n        firstDay={0}\r\n        navLinks\r\n        editable\r\n        selectable\r\n        selectMirror\r\n        dayMaxEvents\r\n        dayMaxEventRows={6}\r\n        slotDuration={{ minutes: minDurationMinutes }}\r\n        slotLabelInterval=\"01:00\"\r\n        slotEventOverlap={false}\r\n        events={state.events.slice()}\r\n        select={handleDateSelect}\r\n        dateClick={handleDateClick}\r\n        eventContent={renderEventContent}\r\n        eventClick={handleEventClick}\r\n        eventChange={handleEventChange}\r\n        fixedWeekCount={false}\r\n        datesSet={onUpdateDates}\r\n        allDayText=\"종일\"\r\n        moreLinkText=\"\"\r\n        dayHeaderContent={renderHeaderContent}\r\n        dayCellContent={renderDayContent}\r\n        allDayMaintainDuration\r\n        navLinkDayClick={handleNavLinkDayClick}\r\n        unselectAuto={true}\r\n        unselectCancel=\".MuiDialogContent-root\"\r\n        selectAllow={handleSelectAllow}\r\n        dragScroll={false}\r\n      />\r\n      <CreateDialog\r\n        defaultSettings={defaultSettings}\r\n        addEvent={addEvent}\r\n        open={createDialogOpen}\r\n        setOpen={setCreateDialogOpen}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport const Calendar = observer(CalendarComponent);\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Select from '@material-ui/core/Select';\r\nimport { Checkbox, Hidden } from '@material-ui/core';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport useLocalStorage from 'react-use-localstorage';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { zerostrengthCalendar, Calendar } from './components/calendar';\r\nimport { create } from 'mobx-persist';\r\n\r\nconst hydrate = create();\r\nhydrate('zerostrengthCalendar', zerostrengthCalendar);\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  title: {\r\n    marginRight: '25px',\r\n  },\r\n  yearMonth: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst App = observer(() => {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({ left: false });\r\n  const ref = React.createRef(); // calendar ref\r\n  const [title, setTitle] = React.useState('');\r\n  const [viewType, setViewType] = useLocalStorage('calendarViewType', 'dayGridMonth');\r\n  const [lunar, setLunar] = useLocalStorage('calendarLunar', 'false');\r\n\r\n  React.useEffect(() => {\r\n    ref.current.getApi().changeView(viewType);\r\n  }, [ref, viewType]);\r\n\r\n  const toggleDrawer = (anchor, open) => event => {\r\n    if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const handlePrevClick = () => {\r\n    ref.current.getApi().prev();\r\n  };\r\n\r\n  const handleNextClick = () => {\r\n    ref.current.getApi().next();\r\n  };\r\n\r\n  const handleTodayClick = () => {\r\n    ref.current.getApi().today();\r\n  };\r\n\r\n  const handleViewChange = e => {\r\n    setViewType(e.target.value);\r\n  };\r\n\r\n  const handleLunarChange = e => {\r\n    setLunar(String(e.target.checked));\r\n  };\r\n\r\n  const Sider = anchor => (\r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n      })}\r\n      role=\"presentation\"\r\n      onKeyDown={toggleDrawer(anchor, false)}\r\n    >\r\n      <Hidden smUp>\r\n        <List>\r\n          {[\r\n            ['월', 'dayGridMonth'],\r\n            ['주', 'timeGridWeek'],\r\n            ['일', 'timeGridDay'],\r\n            ['목록', 'listWeek'],\r\n          ].map((item, index) => (\r\n            <ListItem selected={viewType === item[1]} button key={index} onClick={() => setViewType(item[1])}>\r\n              {item[0]}\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <Divider />\r\n      </Hidden>\r\n      <List>\r\n        <ListItem>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox checked={lunar === 'true'} onChange={handleLunarChange} name=\"checkedB\" color=\"primary\" />\r\n            }\r\n            label=\"음력\"\r\n          />\r\n        </ListItem>\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {['내 캘린더', '캘린더1', '캘린더2'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <IconButton onClick={toggleDrawer('left', true)} color=\"inherit\" aria-label=\"open drawer\" edge=\"start\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Hidden xsDown>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              캘린더\r\n            </Typography>\r\n            <IconButton onClick={handleTodayClick} color=\"inherit\" aria-label=\"today-button\" edge=\"start\">\r\n              <Button size=\"small\" variant=\"contained\" color=\"primary\">\r\n                오늘\r\n              </Button>\r\n            </IconButton>\r\n            <IconButton onClick={handlePrevClick} color=\"inherit\" aria-label=\"arrow-left\" edge=\"start\">\r\n              <NavigateBeforeIcon />\r\n            </IconButton>\r\n            <IconButton onClick={handleNextClick} color=\"inherit\" aria-label=\"arrow-right\" edge=\"start\">\r\n              <NavigateNextIcon />\r\n            </IconButton>\r\n          </Hidden>\r\n          <Typography variant=\"h6\" className={classes.yearMonth}>\r\n            {title}\r\n          </Typography>\r\n          <Hidden xsDown>\r\n            <IconButton color=\"inherit\" aria-label=\"user-setting\" edge=\"start\">\r\n              <SettingsIcon />\r\n            </IconButton>\r\n            <Select\r\n              labelId=\"demo-simple-select-label\"\r\n              id=\"demo-simple-select\"\r\n              value={viewType}\r\n              onChange={handleViewChange}\r\n            >\r\n              <MenuItem value={'dayGridMonth'}>월</MenuItem>\r\n              <MenuItem value={'timeGridWeek'}>주</MenuItem>\r\n              <MenuItem value={'timeGridDay'}>일</MenuItem>\r\n              <MenuItem value={'listWeek'}>목록</MenuItem>\r\n            </Select>\r\n          </Hidden>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <React.Fragment>\r\n        <SwipeableDrawer\r\n          anchor={'left'}\r\n          open={state['left']}\r\n          onClose={toggleDrawer('left', false)}\r\n          onOpen={toggleDrawer('left', true)}\r\n        >\r\n          {Sider('left')}\r\n        </SwipeableDrawer>\r\n      </React.Fragment>\r\n      <main id=\"calendar-layout\" style={{ marginTop: '75px', marginLeft: '20px', marginRight: '20px' }}>\r\n        <Calendar\r\n          minDurationMinutes={30}\r\n          setter={{ setTitle, setViewType }}\r\n          lunar={lunar}\r\n          calendarRef={ref}\r\n          locale=\"ko\"\r\n        />\r\n      </main>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App />\r\n  </>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}