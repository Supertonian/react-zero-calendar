{"version":3,"sources":["components/calendar.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","setTitle","calendarRef","handleEventClick","clickInfo","handleDateSelect","selectInfo","view","calendar","unselect","handleEventChange","changeInfo","revert","renderEventContent","eventContent","renderHeaderContent","content","renderDayContent","onUpdateDates","current","getApi","title","useEffect","useObserver","ref","height","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","luxonPlugin","rrulePlugin","headerToolbar","locale","initialView","nowIndicator","titleFormat","buttonIcons","firstDay","navLinks","editable","selectable","selectMirror","dayMaxEvents","dayMaxEventRows","slotDuration","slotLabelInterval","events","start","end","select","eventClick","eventChange","fixedWeekCount","datesSet","allDayText","moreLinkText","dayHeaderContent","dayCellContent","allDayMaintainDuration","useStyles","makeStyles","theme","list","width","fullList","root","display","marginRight","yearMonth","flexGrow","SwipeableTemporaryDrawer","classes","React","useState","left","state","setState","createRef","viewType","setViewType","didMountRef","useRef","changeView","anchor","toggleDrawer","open","event","type","key","AppBar","position","Toolbar","IconButton","onClick","color","aria-label","edge","Hidden","xsDown","Typography","variant","className","today","Button","size","prev","next","Select","labelId","id","value","onChange","e","target","MenuItem","Fragment","SwipeableDrawer","onClose","onOpen","clsx","role","onKeyDown","List","map","text","index","ListItem","button","ListItemIcon","ListItemText","primary","Divider","style","marginTop","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4d5d17a.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useObserver } from 'mobx-react';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport luxonPlugin from '@fullcalendar/luxon';\r\nimport rrulePlugin from '@fullcalendar/rrule';\r\n// import { getLunar } from \"holiday-kr\";\r\n\r\nconst Calendar = ({ setTitle, calendarRef }) => {\r\n  useEffect(() => {\r\n    setTitle(calendarRef.current.getApi().view.title);\r\n  }, [calendarRef, setTitle]);\r\n\r\n  function handleEventClick(clickInfo) {}\r\n\r\n  function handleDateSelect(selectInfo) {\r\n    const calendarApi = selectInfo.view.calendar;\r\n    calendarApi.unselect();\r\n  }\r\n\r\n  function handleEventChange(changeInfo) {\r\n    changeInfo.revert();\r\n  }\r\n\r\n  function renderEventContent(eventContent) {}\r\n\r\n  function renderHeaderContent(content) {}\r\n\r\n  function renderDayContent(content) {}\r\n\r\n  function onUpdateDates() {\r\n    if (calendarRef && calendarRef.current) {\r\n      setTitle(calendarRef.current.getApi().view.title);\r\n    }\r\n  }\r\n\r\n  return useObserver(() => (\r\n    <>\r\n      <FullCalendar\r\n        ref={calendarRef}\r\n        height=\"600px\"\r\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin, luxonPlugin, rrulePlugin]}\r\n        headerToolbar={false}\r\n        locale=\"ko\"\r\n        initialView=\"dayGridMonth\"\r\n        nowIndicator\r\n        titleFormat=\"yyyy년 {MM}월\"\r\n        buttonIcons\r\n        firstDay={0}\r\n        navLinks\r\n        editable\r\n        selectable\r\n        selectMirror\r\n        dayMaxEvents\r\n        dayMaxEventRows={6}\r\n        slotDuration=\"00:30:00\"\r\n        slotLabelInterval=\"01:00\"\r\n        events={[\r\n          {\r\n            title: 'HELLO',\r\n            start: '2020-10-01 00:00:00',\r\n            end: '2020-10-03 15:00:00',\r\n          },\r\n        ]}\r\n        select={handleDateSelect}\r\n        eventContent={renderEventContent}\r\n        eventClick={handleEventClick}\r\n        eventChange={handleEventChange}\r\n        fixedWeekCount={false}\r\n        datesSet={onUpdateDates}\r\n        allDayText=\"종일\"\r\n        moreLinkText=\"\"\r\n        dayHeaderContent={renderHeaderContent}\r\n        dayCellContent={renderDayContent}\r\n        allDayMaintainDuration\r\n      />\r\n    </>\r\n  ));\r\n};\r\n\r\nexport default Calendar;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Select from '@material-ui/core/Select';\r\nimport Calendar from './components/calendar';\r\nimport { Hidden } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  title: {\r\n    marginRight: '25px',\r\n  },\r\n  yearMonth: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function SwipeableTemporaryDrawer() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({ left: false });\r\n  const ref = React.createRef(); // calendar ref\r\n  const [title, setTitle] = React.useState('');\r\n  const [viewType, setViewType] = React.useState('dayGridMonth');\r\n  const didMountRef = React.useRef(false); // to check mounted\r\n\r\n  React.useEffect(() => {\r\n    if (didMountRef.current) {\r\n      ref.current.getApi().changeView(viewType);\r\n    } else didMountRef.current = true;\r\n  }, [viewType]);\r\n\r\n  const toggleDrawer = (anchor, open) => event => {\r\n    if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const handlePrevClick = () => {\r\n    ref.current.getApi().prev();\r\n  };\r\n\r\n  const handleNextClick = () => {\r\n    ref.current.getApi().next();\r\n  };\r\n\r\n  const handleTodayClick = () => {\r\n    ref.current.getApi().today();\r\n  };\r\n\r\n  const handleViewChange = e => {\r\n    setViewType(e.target.value);\r\n  };\r\n\r\n  const Sider = anchor => (\r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n      })}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(anchor, false)}\r\n      onKeyDown={toggleDrawer(anchor, false)}\r\n    >\r\n      <List>\r\n        {['음력', '공휴일'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {['내 캘린더', '캘린더1', '캘린더2'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <IconButton onClick={toggleDrawer('left', true)} color=\"inherit\" aria-label=\"open drawer\" edge=\"start\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Hidden xsDown>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              캘린더\r\n            </Typography>\r\n            <IconButton onClick={handleTodayClick} color=\"inherit\" aria-label=\"today-button\" edge=\"start\">\r\n              <Button size=\"small\" variant=\"contained\" color=\"primary\">\r\n                오늘\r\n              </Button>\r\n            </IconButton>\r\n            <IconButton onClick={handlePrevClick} color=\"inherit\" aria-label=\"arrow-left\" edge=\"start\">\r\n              <NavigateBeforeIcon />\r\n            </IconButton>\r\n            <IconButton onClick={handleNextClick} color=\"inherit\" aria-label=\"arrow-right\" edge=\"start\">\r\n              <NavigateNextIcon />\r\n            </IconButton>\r\n          </Hidden>\r\n          <Typography variant=\"h6\" className={classes.yearMonth}>\r\n            {title}\r\n          </Typography>\r\n          <Hidden xsDown>\r\n            <IconButton color=\"inherit\" aria-label=\"user-setting\" edge=\"start\">\r\n              <SettingsIcon />\r\n            </IconButton>\r\n            <Select\r\n              labelId=\"demo-simple-select-label\"\r\n              id=\"demo-simple-select\"\r\n              value={viewType}\r\n              onChange={handleViewChange}\r\n            >\r\n              <MenuItem value={'dayGridMonth'}>월</MenuItem>\r\n              <MenuItem value={'timeGridWeek'}>주</MenuItem>\r\n              <MenuItem value={'timeGridDay'}>일</MenuItem>\r\n            </Select>\r\n          </Hidden>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <React.Fragment>\r\n        <SwipeableDrawer\r\n          anchor={'left'}\r\n          open={state['left']}\r\n          onClose={toggleDrawer('left', false)}\r\n          onOpen={toggleDrawer('left', true)}\r\n        >\r\n          {Sider('left')}\r\n        </SwipeableDrawer>\r\n      </React.Fragment>\r\n      <main style={{ marginTop: '75px', marginLeft: '20px', marginRight: '20px' }}>\r\n        <Calendar setTitle={setTitle} calendarRef={ref} />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}